// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  colaboradores Colaborador[]
  produtos      Produto[]
  processos     Processo[]
  producoes     Producao[]
  maquinas      Maquina[]

  subscriptionId Int  @default(1)
  subscription  Subscription    @relation(fields: [subscriptionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Colaborador {
  id              Int        @id @default(autoincrement())
  nome            String
  tempoDisponivel Int
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  Producoes       Producao[]
}

model Maquina {
  id        Int        @id @default(autoincrement())
  nome      String
  descricao String
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  Processos Processo[]
}

model Produto {
  id        Int        @id @default(autoincrement())
  nome      String
  descricao String
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  Producoes Producao[]
  Processo  Processo[]
}

model Processo {
  id         Int        @id @default(autoincrement())
  referencia String
  maquinaId  Int
  descricao  String
  tempo      Int
  produtoId  Int
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  maquina    Maquina    @relation(fields: [maquinaId], references: [id])
  produto    Produto    @relation(fields: [produtoId], references: [id])
  Producoes  Producao[]
}

model Producao {
  id            Int         @id @default(autoincrement())
  colaboradorId Int
  produtoId     Int
  processoId    Int
  data          DateTime
  tempo         Int
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  colaborador   Colaborador @relation(fields: [colaboradorId], references: [id])
  produto       Produto     @relation(fields: [produtoId], references: [id])
  processo      Processo    @relation(fields: [processoId], references: [id])
}

model Subscription {
  id    Int     @id @default(autoincrement())
  type  String
  users User[]
}
